// Mocks generated by Mockito 5.0.17 from annotations
// in todo_list/test/domain/usecases/get_tasks_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_list/data/models/task.dart' as _i2;
import 'package:todo_list/domain/repositories/task_repository.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTask_0 extends _i1.Fake implements _i2.Task {}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Task> create({_i2.Task? task}) =>
      (super.noSuchMethod(Invocation.method(#create, [], {#task: task}),
              returnValue: Future<_i2.Task>.value(_FakeTask_0()))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Future<_i2.Task> delete({_i2.Task? task}) =>
      (super.noSuchMethod(Invocation.method(#delete, [], {#task: task}),
              returnValue: Future<_i2.Task>.value(_FakeTask_0()))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Future<_i2.Task> complate({_i2.Task? task}) =>
      (super.noSuchMethod(Invocation.method(#complate, [], {#task: task}),
              returnValue: Future<_i2.Task>.value(_FakeTask_0()))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Future<List<_i2.Task>> tasks() =>
      (super.noSuchMethod(Invocation.method(#tasks, []),
              returnValue: Future<List<_i2.Task>>.value(<_i2.Task>[]))
          as _i4.Future<List<_i2.Task>>);
  @override
  _i4.Future<List<_i2.Task>> todayTasks() =>
      (super.noSuchMethod(Invocation.method(#todayTasks, []),
              returnValue: Future<List<_i2.Task>>.value(<_i2.Task>[]))
          as _i4.Future<List<_i2.Task>>);
}
